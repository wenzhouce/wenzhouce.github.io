<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Devu和鲜花</title>
    <url>/2024/02/03/Devu%E5%92%8C%E9%B2%9C%E8%8A%B1/</url>
    <content><![CDATA[<p><a href="https://www.acwing.com/problem/content/216/">214. Devu和鲜花 - AcWing题库</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Devu 有 N 个盒子，第 i 个盒子中有 Ai 枝花。</p>
<p>同一个盒子内的花颜色相同，不同盒子内的花颜色不同。</p>
<p>Devu 要从这些盒子中选出 M 枝花组成一束，求共有多少种方案。</p>
<p>若两束花每种颜色的花的数量都相同，则认为这两束花是相同的方案。</p>
<p>结果需对 1e9+7 取模之后方可输出。</p>
<p>1≤N≤20，0≤M≤1e14，0≤Ai≤1e12</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">隔板法：N的范围很小，M的范围很大，那么可以考虑用隔板法，在M+N-1个格子里插入N-1个隔板，即将M分成N类</span></span><br><span class="line"><span class="comment">容斥原理：因为每个盒子不是无数枝花，所以可以考虑用全部的排法-不满足条件的排法</span></span><br><span class="line"><span class="comment">1.全部的排法即C(M+N-1,N-1)</span></span><br><span class="line"><span class="comment">2.不满足的排法=(S1∪S2…∪SN)</span></span><br><span class="line"><span class="comment">3.Si表示所选的排法中这种花的数量超过了盒子中花的总数，那可知至少取了xi+1枝花，那么隔板法就应该变为从M+N-1-(xi+1)中插入N-1个隔板，即C(M+N-1-xi-1,N-1)</span></span><br><span class="line"><span class="comment">4.根据容斥原理奇数个加，偶数个减，就可以得到不满足的排法的总数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> p[<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> d=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=a;i&gt;a-b;i--)d=i%mod*d%mod;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;p[i];</span><br><span class="line">    <span class="type">int</span> d=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)d=d*i%mod;</span><br><span class="line">    d=<span class="built_in">qmi</span>(d,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="type">int</span> ans=d*<span class="built_in">C</span>(m+n<span class="number">-1</span>,n<span class="number">-1</span>)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=m+n<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> y=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                y*=<span class="number">-1</span>;</span><br><span class="line">                x-=p[j]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=(ans+<span class="built_in">C</span>(x,n<span class="number">-1</span>)*d%mod*y)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(ans+mod)%mod;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数论</tag>
        <tag>容斥原理</tag>
        <tag>排列组合</tag>
        <tag>隔板法</tag>
      </tags>
  </entry>
  <entry>
    <title>FEB</title>
    <url>/2024/02/03/FEB/</url>
    <content><![CDATA[<p><a href="https://www.acwing.com/problem/content/4996/">4993. FEB - AcWing题库</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有一个长度为 N 的字符串 S，其中的每个字符要么是 <code>B</code>，要么是 <code>E</code>。</p>
<p>我们规定 S 的价值等于其中包含的子串 <code>BB</code> 以及子串 <code>EE</code> 的数量之和。</p>
<p>例如，<code>BBBEEE</code> 中包含 2 个 <code>BB</code> 以及 22个 <code>EE</code>，所以 <code>BBBEEE</code> 的价值等于 4。</p>
<p>我们想要计算 S 的价值，不幸的是，在我们得到 S 之前，约翰将其中的一些字符改为了 <code>F</code>。</p>
<p>目前，我们只能看到<strong>改动后</strong>的字符串 S，对于其中的每个 <code>F</code>，我们并不清楚它之前是 <code>B</code> 还是 <code>E</code>。</p>
<p>请你计算，<strong>改动前</strong>的 S 有多少种可能的价值并将所有可能价值全部输出。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分类讨论以下几种情况：</span></span><br><span class="line"><span class="comment">情况1：xxxxxx  0，1，2，···，k-1</span></span><br><span class="line"><span class="comment">情况2：0xxxxx  0，1，2，···，k</span></span><br><span class="line"><span class="comment">情况3：0xxxx1  k+1，k-1，k-3，···，0</span></span><br><span class="line"><span class="comment">情况4：0xxxx0  k，k-2，k-4，···，0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.如果给的字符串中没有前后缀的F，则等差公式应该是2；如过有，则等差公式应该是1</span></span><br><span class="line"><span class="comment">2.然后算出中间段的最大值和最小值</span></span><br><span class="line"><span class="comment">3.中间段的最大值加上前后缀F所能改动的最大值，从最小值加上等差到最大值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[l]==<span class="string">&#x27;F&#x27;</span>)l++;</span><br><span class="line">    <span class="keyword">while</span>(s[r]==<span class="string">&#x27;F&#x27;</span>)r--;</span><br><span class="line">    <span class="keyword">if</span>(l==n)&#123;</span><br><span class="line">        cout&lt;&lt;n&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cout&lt;&lt;i&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>,high=<span class="number">0</span>;</span><br><span class="line">        string str=s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l+<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;F&#x27;</span>)str[i]=str[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(str[i]==str[i<span class="number">-1</span>])high++;</span><br><span class="line">        &#125;</span><br><span class="line">        str=s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l+<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str[i<span class="number">-1</span>]==<span class="string">&#x27;E&#x27;</span>)str[i]=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> str[i]=<span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==str[i<span class="number">-1</span>])low++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> d=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="number">0</span>&amp;&amp;r==n<span class="number">-1</span>)d=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> high+=n<span class="number">-1</span>-r+l;</span><br><span class="line">        cout&lt;&lt;(high-low)/d+<span class="number">1</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=low;i&lt;=high;i+=d)cout&lt;&lt;i&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>字符串</tag>
        <tag>分类讨论</tag>
      </tags>
  </entry>
  <entry>
    <title>一道难题</title>
    <url>/2024/02/01/%E4%B8%80%E9%81%93%E9%9A%BE%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://ac.nowcoder.com/acm/problem/240153">一道难题 (nowcoder.com)</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数字 n，求出 1−n 中 只由 0 或 1 组成的，且至少有三个 1 相连的数（不含前导零）有多少个。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dp[i][0] 第i位为0的情况</span></span><br><span class="line"><span class="comment">dp[i][1] 第i-1位为0，第i位为1的情况</span></span><br><span class="line"><span class="comment">dp[i][2] 第i-2位为0，连续两个1的情况</span></span><br><span class="line"><span class="comment">dp[i][3] 已满足连续3个1的情况</span></span><br><span class="line"><span class="comment">如果连续的1等于3了，那么第i位就可以变成0，也就是说可满足的情况*2</span></span><br><span class="line"><span class="comment">dp[i][3]=dp[i-1][2]+dp[i-1][3]*2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">主要的问题还是要确保数的大小要不超过n，这里可以将临界值进行判断：</span></span><br><span class="line"><span class="comment">1.如果遍历到一个大于1的点，那么前面保持不变，只要后面找到满足连续3的所有情况</span></span><br><span class="line"><span class="comment">2.如果先遍历到连续的3个1，也是前面保持不变，只要后面的数不超过n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">从头开始遍历：</span></span><br><span class="line"><span class="comment">1.如果连续3个1，那么我们只要找到后面可以满足小于n，不用管后面满不满足连续3个1的所有情况：</span></span><br><span class="line"><span class="comment">  1.1.如果s[i]&gt;&#x27;1&#x27;，以i为起点后面不论是连续0个1还是连续3个1的情况都可以，所以ans+=dp[n-i+1][j]，j=1，2，3</span></span><br><span class="line"><span class="comment">  1.2.如果s[i]==&#x27;1&#x27;，那么就有两种情况，一种是1变成0，那么后面就有1&lt;&lt;(n-i)种情况；另一种是1不变，那么后面我们又要找以i开头可满足的所有小于n的情况，也是不用考虑有无连续3个1</span></span><br><span class="line"><span class="comment">  1.3.如果s[i]==&#x27;0&#x27;，这个位就不能变，所以跳过</span></span><br><span class="line"><span class="comment">  每次遍历的位置不存在也是一种情况所以返回的时候ans+1</span></span><br><span class="line"><span class="comment">2.如果s[i]&gt;&#x27;1&#x27;，那么只要找到n-i+1这么长情况下所有的可满足的情况即dp[n-i+1][3]；如果前面已经有连续j个1，j一定小于3，那么我们也可以找n-i+1长情况下满足补充剩下1的情况即dp[n-i+1][3-j]</span></span><br><span class="line"><span class="comment">  这里要找的是长度等于n的所有情况，一种情况是连续3个1在i位置上，则前面要么有连续1个1或连续2个1，另一种情况是连续3个1在i位置后面</span></span><br><span class="line"><span class="comment">3.如果s[i]==&#x27;1&#x27;，找出所有长度小于等于n-i的满足存在3个连续1的情况即dp[n-i][3]，唯一能解释不重复的是如果遇到了两个重复的排序，则前一个排序，而且这个加完的数是不超过n的所以是满足条件的</span></span><br><span class="line"><span class="comment">4.如果s[i]==&#x27;0&#x27;，跳过，并且记录连续1的cnt也重置</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> a[N],n;</span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">                ans+=dp[n-i+<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            ans+=(<span class="number">1</span>&lt;&lt;(n-i))+<span class="built_in">dfs</span>(i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    n=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)a[i+<span class="number">1</span>]=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>]+dp[i<span class="number">-1</span>][<span class="number">1</span>]+dp[i<span class="number">-1</span>][<span class="number">2</span>];</span><br><span class="line">        dp[i][<span class="number">1</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        dp[i][<span class="number">2</span>]=dp[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        dp[i][<span class="number">3</span>]=dp[i<span class="number">-1</span>][<span class="number">2</span>]+dp[i<span class="number">-1</span>][<span class="number">3</span>]*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt==<span class="number">3</span>)&#123;</span><br><span class="line">            ans+=<span class="built_in">dfs</span>(i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=cnt;j++)&#123;</span><br><span class="line">                ans+=dp[n-i+<span class="number">1</span>][<span class="number">3</span>-j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            ans+=dp[n-i][<span class="number">3</span>];</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;<span class="keyword">else</span> cnt=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>搜索</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>小红叒战小紫</title>
    <url>/2024/02/01/%E5%B0%8F%E7%BA%A2%E5%8F%92%E6%88%98%E5%B0%8F%E7%B4%AB/</url>
    <content><![CDATA[<p><a href="https://ac.nowcoder.com/acm/problem/267147">小红叒战小紫 (nowcoder.com)</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>小红这天又和小紫发起了一场对战。对战的规则如下：<br> 两人各有一些怪兽卡。每回合两人随机的从自己当前存活的怪兽卡中抽取一张发起决斗，战斗力低的怪兽卡死亡。如果两张怪兽卡战斗力相同，则无事发生。<br> 游戏会进行到“如果抽卡，则 100% 的概率无事发生”或者“有一方卡牌被用完”时结束。请你计算小红和小紫游戏进行回合数的期望。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">战斗力为2的肯定死不掉，所以这题主要看抽出战斗力为1的概率</span></span><br><span class="line"><span class="comment">1.先记录小红和小紫所各自拥有的战斗力为1和2的数量，如果都是2或者都是1那就输出0</span></span><br><span class="line"><span class="comment">2.设dp[i][j]，代表小红拥有i张，小紫拥有j张的时候回合数的期望</span></span><br><span class="line"><span class="comment">3.设p为小红从i张战斗力为1的牌+a2张战斗力为2的牌中取出1，小紫从j张战斗力为1的牌+b2张战斗力为2的牌中取出2的概率</span></span><br><span class="line"><span class="comment">4.设q为小红从i张战斗力为1的牌+a2张战斗力为2的牌中取出2，小紫从j张战斗力为1的牌+b2张战斗力为2的牌中取出1的概率</span></span><br><span class="line"><span class="comment">5.都抽到1的概率和都抽到2的话牌数不变，所以回合数概率=(1-p-q)*dp[i][j]，所以dp[i][j]=p*dp[i-1][j]+q*dp[i][j-1]+(1-p-q)*dp[i][j]+1，因为抽了一次所以最后+1</span></span><br><span class="line"><span class="comment">6.换算一下就是dp[i][j]=(p*dp[i-1][j]+q*dp[i][j-1]+1)/(p+q)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">55</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>],b[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>,b=mod<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,m,x;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        a[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        b[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((!a[<span class="number">1</span>]&amp;&amp;!b[<span class="number">1</span>])||(!a[<span class="number">2</span>]&amp;&amp;!b[<span class="number">2</span>]))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//小红抽到1，小紫抽到2的概率</span></span><br><span class="line">            <span class="type">int</span> p1=(i*<span class="built_in">qmi</span>(i+a[<span class="number">2</span>])%mod)*(b[<span class="number">2</span>]*<span class="built_in">qmi</span>(j+b[<span class="number">2</span>])%mod)%mod;</span><br><span class="line">            <span class="comment">//小红抽到2，小紫抽到1的概率</span></span><br><span class="line">            <span class="type">int</span> p2=(a[<span class="number">2</span>]*<span class="built_in">qmi</span>(i+a[<span class="number">2</span>])%mod)*(j*<span class="built_in">qmi</span>(j+b[<span class="number">2</span>])%mod)%mod;</span><br><span class="line">            dp[i][j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i)dp[i][j]+=p1*dp[i<span class="number">-1</span>][j]%mod;</span><br><span class="line">            <span class="keyword">if</span>(j)dp[i][j]+=p2*dp[i][j<span class="number">-1</span>]%mod;</span><br><span class="line">            dp[i][j]=dp[i][j]*<span class="built_in">qmi</span>(p1+p2)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[a[<span class="number">1</span>]][b[<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>概率DP</tag>
      </tags>
  </entry>
  <entry>
    <title>数学考试</title>
    <url>/2024/02/02/%E6%95%B0%E5%AD%A6%E8%80%83%E8%AF%95/</url>
    <content><![CDATA[<p><a href="https://ac.nowcoder.com/acm/problem/238810">数学考试 (nowcoder.com)</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>特训练习共 n 道题，第 i 题的难度为 ai，分值为 bi。为了更好提高自己的数学水平，牛妹决定按照题目顺序做题。做完第 i 题后，牛妹可以选择保持自己的压力指数 P 不变、使 P 增加 Qi 或使 P 减少 Wi。压力指数上限为 K，下限为 0。当牛妹在压力为 P 的状态下完成第 i 题时，可以积累 ai×P 的经验。但压力太大会反噬牛妹，当 P&gt;bi 时，牛妹不能做对第 i 题，无法积累任何经验。请注意，无论是否做对，都算作完成了第 i 题，在做完后，才更改压力值。牛妹想要知道，完成本次数学特训后，她最多可以积累多少经验。牛妹初始的压力值可以由牛妹在 0−K 范围内自由选定。请注意，本题的空间限制较为特别，仅有 64MB。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.定义问题和状态</span></span><br><span class="line"><span class="comment">  1.1.n表示题目数量</span></span><br><span class="line"><span class="comment">  1.2.k表示压力容量</span></span><br><span class="line"><span class="comment">  1.3.dp[2][N]是一个二维数组，其中dp[i%2][j]表示考虑前i个题目，当前压力容量为j时能够获得的最大经验</span></span><br><span class="line"><span class="comment">2.状态转移方程</span></span><br><span class="line"><span class="comment">  2.1.对于每题i，更新i+1的值</span></span><br><span class="line"><span class="comment">  2.2.如果当前压力j不大于b，则其经验a*j可以被加入当前经验</span></span><br><span class="line"><span class="comment">  2.3.因为W和Q的范围都是1—K，所以更新i+1的时候要判断三种情况：</span></span><br><span class="line"><span class="comment">      2.3.1.选择保持自己的压力P不变，则dp[i+1][j]应该与dp[i][j]判断谁的经验更多</span></span><br><span class="line"><span class="comment">      2.3.2.选择增加Q，增加Q以后若不超过K，更新dp[i+1][j+Q]</span></span><br><span class="line"><span class="comment">      2.3.3.选择减少W，减少W以后若不小于0，更新dp[i+1][j-W]</span></span><br><span class="line"><span class="comment">3.最终结果</span></span><br><span class="line"><span class="comment">  遍历dp[(n+1)&amp;1][...]数组，找出最大的经验，相当于考虑所有物品之后，背包最大容量为k的最大价值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,q,w;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;q&gt;&gt;w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=k;j++)&#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;=b)x=a*j;</span><br><span class="line">            dp[(i+<span class="number">1</span>)&amp;<span class="number">1</span>][j]=<span class="built_in">max</span>(dp[(i+<span class="number">1</span>)&amp;<span class="number">1</span>][j],dp[i&amp;<span class="number">1</span>][j]+x);</span><br><span class="line">            <span class="keyword">if</span>(j-w&gt;=<span class="number">0</span>)dp[(i+<span class="number">1</span>)&amp;<span class="number">1</span>][j-w]=<span class="built_in">max</span>(dp[(i+<span class="number">1</span>)&amp;<span class="number">1</span>][j-w],dp[i&amp;<span class="number">1</span>][j]+x);</span><br><span class="line">            <span class="keyword">if</span>(j+q&lt;=k)dp[(i+<span class="number">1</span>)&amp;<span class="number">1</span>][j+q]=<span class="built_in">max</span>(dp[(i+<span class="number">1</span>)&amp;<span class="number">1</span>][j+q],dp[i&amp;<span class="number">1</span>][j]+x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,dp[(n+<span class="number">1</span>)&amp;<span class="number">1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>背包问题</tag>
      </tags>
  </entry>
  <entry>
    <title>目录</title>
    <url>/2024/01/31/%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>动态规划基础</p>
<p>记忆化搜索</p>
<p>背包DP</p>
<p>区间DP</p>
<p>DAG上的DP</p>
<p>树形DP</p>
<p>状压DP</p>
<p>数位DP</p>
<p>插头DP</p>
<p>计数DP</p>
<p>动态DP</p>
<p>概率DP</p>
<p>DP优化</p>
<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><p><a href="https://oi-wiki.org/graph/">图论部分简介</a></p>
<p><a href="https://oi-wiki.org/graph/concept/">图论相关概念</a></p>
<p><a href="https://oi-wiki.org/graph/save/">图的存储</a></p>
<p><a href="https://oi-wiki.org/graph/dfs/">DFS（图论）</a></p>
<p><a href="https://oi-wiki.org/graph/bfs/">BFS（图论）</a></p>
<p>树上问题</p>
<p><a href="https://oi-wiki.org/graph/matrix-tree/">矩阵树定理</a></p>
<p><a href="https://oi-wiki.org/graph/dag/">有向无环图</a></p>
<p><a href="https://oi-wiki.org/graph/topo/">拓扑排序</a></p>
<p><a href="https://oi-wiki.org/graph/mst/">最小生成树</a></p>
<p><a href="https://oi-wiki.org/graph/steiner-tree/">斯坦纳树</a></p>
<p><a href="https://oi-wiki.org/graph/dmst/">最小树形图</a></p>
<p><a href="https://oi-wiki.org/graph/mdst/">最小直径生成树</a></p>
<p><a href="https://oi-wiki.org/graph/shortest-path/">最短路</a></p>
<p><a href="https://oi-wiki.org/graph/node/">拆点</a></p>
<p><a href="https://oi-wiki.org/graph/diff-constraints/">差分约束</a></p>
<p><a href="https://oi-wiki.org/graph/kth-path/">k 短路</a></p>
<p><a href="https://oi-wiki.org/graph/mod-shortest-path/">同余最短路</a></p>
<p>连通性相关</p>
<p><a href="https://oi-wiki.org/graph/rings-count/">环计数问题</a></p>
<p><a href="https://oi-wiki.org/graph/2-sat/">2-SAT</a></p>
<p><a href="https://oi-wiki.org/graph/euler/">欧拉图</a></p>
<p><a href="https://oi-wiki.org/graph/hamilton/">哈密顿图</a></p>
<p><a href="https://oi-wiki.org/graph/bi-graph/">二分图</a></p>
<p><a href="https://oi-wiki.org/graph/min-cycle/">最小环</a></p>
<p><a href="https://oi-wiki.org/graph/planar/">平面图</a></p>
<p><a href="https://oi-wiki.org/graph/color/">图的着色</a></p>
<p>网络流</p>
<p><a href="https://oi-wiki.org/graph/stoer-wagner/">Stoer–Wagner 算法</a></p>
<p>图的匹配</p>
<p><a href="https://oi-wiki.org/graph/prufer/">Prüfer 序列</a></p>
<p><a href="https://oi-wiki.org/graph/lgv/">LGV 引理</a></p>
<p><a href="https://oi-wiki.org/graph/chord/">弦图</a></p>
<p><a href="https://oi-wiki.org/graph/max-clique/">最大团搜索算法</a></p>
<p><a href="https://oi-wiki.org/graph/dominator-tree/">支配树</a></p>
<p><a href="https://oi-wiki.org/graph/graph-random-walk/">图上随机游走</a></p>
<h2 id="数论基础"><a href="#数论基础" class="headerlink" title="数论基础"></a>数论基础</h2><p>GCD、LCM</p>
<p>快速幂</p>
<p>矩阵快速幂</p>
<p>高斯消元</p>
<p>素数筛</p>
<p>唯一分解定理、约数定理</p>
<p>反素数</p>
<h2 id="数论进阶"><a href="#数论进阶" class="headerlink" title="数论进阶"></a>数论进阶</h2><p>费马小定理</p>
<p>欧拉定理</p>
<p>欧拉函数</p>
<p>欧拉降幂</p>
<p>威尔逊定理</p>
<p>中国剩余定理</p>
<p>扩展中国剩余定理</p>
<p>裴蜀定理</p>
<p>康托定理</p>
<p>康托展开</p>
<p>线性基</p>
<p>整除分块</p>
<h2 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h2><p>排列组合基础</p>
<p>Lucas定理</p>
<h2 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h2><p>尼姆博弈</p>
<p>反尼姆博弈</p>
<p>Nim-K博弈</p>
<p>SG函数</p>
]]></content>
  </entry>
  <entry>
    <title>筛法求欧拉函数</title>
    <url>/2024/01/31/%E7%AD%9B%E6%B3%95%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://www.acwing.com/problem/content/876/">874. 筛法求欧拉函数 - AcWing题库</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个正整数 n，求 1∼n 中每个数的欧拉函数之和。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><img src="/2024/01/31/%E7%AD%9B%E6%B3%95%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/欧拉函数.webp" alt="欧拉函数" style="zoom: 80%;">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> phi[N];</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_eulers</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!phi[i])&#123;</span><br><span class="line">            phi[i]=i<span class="number">-1</span>;</span><br><span class="line">            pre[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre[j]*i&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pre[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                phi[i*pre[j]]=phi[i]*pre[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> phi[i*pre[j]]=phi[i]*(pre[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">get_eulers</span>(n);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans+=phi[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数论</tag>
        <tag>欧拉函数</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>能被整除的数</title>
    <url>/2024/02/02/%E8%83%BD%E8%A2%AB%E6%95%B4%E9%99%A4%E7%9A%84%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://www.acwing.com/problem/content/892/">890. 能被整除的数 - AcWing题库</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数 n 和 m 个不同的质数 p1,p2,…,pm。</p>
<p>请你求出 1∼n 中能被 p1,p2,…,pm 中的至少一个数整除的整数有多少个。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><img src="/2024/02/02/%E8%83%BD%E8%A2%AB%E6%95%B4%E9%99%A4%E7%9A%84%E6%95%B0/容斥原理.png" alt="容斥原理">

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.首先，1~n中能被p整除的数字的个数为n/p下取整，能被整除的数字分别为p,2p,3p...kp</span></span><br><span class="line"><span class="comment">2.根据容斥原理，答案=能被一个p整除的数字个数-能被两个p整除的数字个数...，即加上奇数个，减去偶数个</span></span><br><span class="line"><span class="comment">3.如果某几个p的乘积大于n，则1~n中没有能被这个乘积整除的因子，直接退出</span></span><br><span class="line"><span class="comment">4.因为题目所给的m最大为16，只要小于27用二进制表示都不会超时，那么二进制1代表用这个质数，0代表不用，就可以以此罗列所有的搭配</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> p[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)cin&gt;&gt;p[i];</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;(<span class="number">1</span>&lt;&lt;m);i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                x*=p[j];</span><br><span class="line">                <span class="keyword">if</span>(x&gt;n)&#123;</span><br><span class="line">                    x=<span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(__builtin_popcount(i)%<span class="number">2</span>)ans+=n/x;</span><br><span class="line">        <span class="keyword">else</span> ans-=n/x;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数论</tag>
        <tag>容斥原理</tag>
        <tag>模板</tag>
      </tags>
  </entry>
</search>
