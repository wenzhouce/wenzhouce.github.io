<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一道难题</title>
    <url>/2024/02/01/%E4%B8%80%E9%81%93%E9%9A%BE%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://ac.nowcoder.com/acm/problem/240153">一道难题 (nowcoder.com)</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数字 n，求出 1−n 中 只由 0 或 1 组成的，且至少有三个 1 相连的数（不含前导零）有多少个。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dp[i][0] 第i位为0的情况</span></span><br><span class="line"><span class="comment">dp[i][1] 第i-1位为0，第i位为1的情况</span></span><br><span class="line"><span class="comment">dp[i][2] 第i-2位为0，连续两个1的情况</span></span><br><span class="line"><span class="comment">dp[i][3] 已满足连续3个1的情况</span></span><br><span class="line"><span class="comment">如果连续的1等于3了，那么第i位就可以变成0，也就是说可满足的情况*2</span></span><br><span class="line"><span class="comment">dp[i][3]=dp[i-1][2]+dp[i-1][3]*2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">主要的问题还是要确保数的大小要不超过n，这里可以将临界值进行判断：</span></span><br><span class="line"><span class="comment">1.如果遍历到一个大于1的点，那么前面保持不变，只要后面找到满足连续3的所有情况</span></span><br><span class="line"><span class="comment">2.如果先遍历到连续的3个1，也是前面保持不变，只要后面的数不超过n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">从头开始遍历：</span></span><br><span class="line"><span class="comment">1.如果连续3个1，那么我们只要找到后面可以满足小于n，不用管后面满不满足连续3个1的所有情况：</span></span><br><span class="line"><span class="comment">  1.1.如果s[i]&gt;&#x27;1&#x27;，以i为起点后面不论是连续0个1还是连续3个1的情况都可以，所以ans+=dp[n-i+1][j]，j=1，2，3</span></span><br><span class="line"><span class="comment">  1.2.如果s[i]==&#x27;1&#x27;，那么就有两种情况，一种是1变成0，那么后面就有1&lt;&lt;(n-i)种情况；另一种是1不变，那么后面我们又要找以i开头可满足的所有小于n的情况，也是不用考虑有无连续3个1</span></span><br><span class="line"><span class="comment">  1.3.如果s[i]==&#x27;0&#x27;，这个位就不能变，所以跳过</span></span><br><span class="line"><span class="comment">  每次遍历的位置不存在也是一种情况所以返回的时候ans+1</span></span><br><span class="line"><span class="comment">2.如果s[i]&gt;&#x27;1&#x27;，那么只要找到n-i+1这么长情况下所有的可满足的情况即dp[n-i+1][3]；如果前面已经有连续j个1，j一定小于3，那么我们也可以找n-i+1长情况下满足补充剩下1的情况即dp[n-i+1][3-j]</span></span><br><span class="line"><span class="comment">3.如果s[i]==&#x27;1&#x27;，找出所有长度等于n-i的满足最后连续超过2个1的情况即dp[n-i][3]</span></span><br><span class="line"><span class="comment">4.如果s[i]==&#x27;0&#x27;，跳过，并且记录连续1的cnt也重置</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> a[N],n;</span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">                ans+=dp[n-i+<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            ans+=(<span class="number">1</span>&lt;&lt;(n-i))+<span class="built_in">dfs</span>(i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    n=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)a[i+<span class="number">1</span>]=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>]+dp[i<span class="number">-1</span>][<span class="number">1</span>]+dp[i<span class="number">-1</span>][<span class="number">2</span>];</span><br><span class="line">        dp[i][<span class="number">1</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        dp[i][<span class="number">2</span>]=dp[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        dp[i][<span class="number">3</span>]=dp[i<span class="number">-1</span>][<span class="number">2</span>]+dp[i<span class="number">-1</span>][<span class="number">3</span>]*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt==<span class="number">3</span>)&#123;</span><br><span class="line">            ans+=<span class="built_in">dfs</span>(i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=cnt;j++)&#123;</span><br><span class="line">                ans+=dp[n-i+<span class="number">1</span>][<span class="number">3</span>-j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            ans+=dp[n-i][<span class="number">3</span>];</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;<span class="keyword">else</span> cnt=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>搜索</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2024/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="KMP字符串"><a href="#KMP字符串" class="headerlink" title="KMP字符串"></a><a href="https://www.acwing.com/problem/content/833/">KMP字符串</a></h1><p><strong>题目</strong></p>
<p>给定一个字符串 S，以及一个模式串 P，所有字符串中只包含大小写英文字母以及阿拉伯数字。</p>
<p>模式串 P 在字符串 S 中多次作为子串出现。</p>
<p>求出模式串 P 在字符串 S 中所有出现的位置的起始下标。</p>
<p><img src="https://img-blog.csdnimg.cn/74049c5e1e6049b8b8e53d6044bb9ee3.gif" alt="在这里插入图片描述"></p>
<p><strong>思路</strong></p>
<p>先遍历字符串 P，找出 P 中相同对应的字符串，下标 i 从字符串 P 中的第二个字符开始遍历，下标 j 一开始指向 0，不表示任何字符，如果 i 满足 j+1，则字符串 P 中第 i 的字符对应于第 j+1 的字符；如果不满足，则前面没有对应于 i 的字符。连续相同的情况下，j ++，所以后面有一字串满足字符串前面连续的一段字串，则最后一个字符串下标 i 所对应的 j 就是字串的长度。</p>
<p>数组ne表示字符串中每个字符所能对应的前缀最长的长度。</p>
<p>每个循环中 j 表示 i 前面有 j 个字符相同。</p>
<ul>
<li><p>若不匹配，让j回跳，直到匹配或j&#x3D;0。</p>
</li>
<li><p>若匹配，让j+1，ne[i]&#x3D;j；</p>
</li>
</ul>
<p>![img](file:&#x2F;&#x2F;&#x2F;C:\Users\19522\Documents\Tencent Files\1952287329\Image\C2C\C76178F520D2C0965E66B74483A8F62A.jpg)</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,M=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    <span class="type">char</span> p[N],s[M];</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p+<span class="number">1</span>&gt;&gt;m&gt;&gt;s+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>,i=<span class="number">2</span>;i&lt;=n;i++)		<span class="comment">//如果从第一个遍历,则ne[1]=1,死循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;p[j+<span class="number">1</span>]!=p[i])j=ne[j];</span><br><span class="line">        <span class="keyword">if</span>(p[j+<span class="number">1</span>]==p[i])j++;</span><br><span class="line">        ne[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;p[j+<span class="number">1</span>]!=s[i])j=ne[j];</span><br><span class="line">        <span class="keyword">if</span>(p[j+<span class="number">1</span>]==s[i])j++;</span><br><span class="line">        <span class="keyword">if</span>(j==n)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;i-j&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="契合匹配"><a href="#契合匹配" class="headerlink" title="契合匹配"></a><a href="https://www.lanqiao.cn/problems/5132/learning/?contest_id=144">契合匹配</a></h2><p><strong>题目</strong></p>
<p>小蓝有很多齿轮，每个齿轮的凸起和凹陷分别用一个字符表示，一个字符串表示一个齿轮。 如果两个齿轮的对应位分别是同一个字母的大小写，我们称这两个齿轮是契合的。 例如：AbCDeFgh 和 aBcdEfGH 就是契合的，但是 abc 和 aBC 不是契合的。 这天，小蓝的弟弟小桥从抽屉里拿来了两个齿轮，小蓝想知道，这俩个齿轮是不是契合的。 特别需要注意的是，齿轮是环形的，所以是可以旋转的（顺时针和逆时针均可），如果是契 合的，小蓝还想让你告诉他，最少将第一个齿轮旋转多少位，两个齿轮可以完全契合在一 起。 例如： AbbCd 与 BcDaB，在将第一个齿轮逆时针旋转两位后，变成 bCdAb ，两个齿轮就完全 契合在一起了。</p>
<p><strong>思路</strong></p>
<p>先将第一个字符串全部转换，存进另一个数组中，存两倍大小，判断第二个字符串是否在这个字符串里面，用到了KMP。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">string a;</span><br><span class="line"><span class="type">char</span> p[N],s[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;a&gt;&gt;p+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)a[i]=<span class="built_in">tolower</span>(a[i]);</span><br><span class="line">		<span class="keyword">else</span> a[i]=<span class="built_in">toupper</span>(a[i]);</span><br><span class="line">		s[i+<span class="number">1</span>]=s[n+i+<span class="number">1</span>]=a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>,i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(j&amp;&amp;p[j+<span class="number">1</span>]!=p[i])j=ne[j];</span><br><span class="line">		<span class="keyword">if</span>(p[j+<span class="number">1</span>]==p[i])j++;</span><br><span class="line">		ne[i]=j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(j&amp;&amp;s[i]!=p[j+<span class="number">1</span>])j=ne[j];</span><br><span class="line">		<span class="keyword">if</span>(s[i]==p[j+<span class="number">1</span>])j++;</span><br><span class="line">		<span class="keyword">if</span>(j==n)&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">			cout&lt;&lt;<span class="built_in">min</span>(i-j,n-(i-j));</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="食物链"><a href="#食物链" class="headerlink" title="食物链"></a><a href="https://www.acwing.com/problem/content/242/">食物链</a></h2><p><strong>题目</strong></p>
<p>动物王国中有三类动物 A,B,C，这三类动物的食物链构成了有趣的环形。A 吃 B，B 吃 C，C 吃 A。</p>
<p>现有 N 个动物，以 1 ~ N 编号。每个动物都是 A,B,C 中的一种，但是我们并不知道它到底是哪一种。</p>
<p>有人用两种说法对这 N 个动物所构成的食物链关系进行描述：</p>
<p>- 第一种说法是 1 X Y，表示 X 和 Y 是同类。<br> - 第二种说法是 2 X Y，表示 X 吃 Y。</p>
<p>此人对 N 个动物，用上述两种说法，一句接一句地说出 K 句话，这 K 句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。</p>
<p>- 当前的话与前面的某些真的话冲突，就是假话；<br> - 当前的话中 X 或 Y 比 N 大，就是假话；<br> - 当前的话表示 X 吃 X，就是假话。</p>
<p>你的任务是根据给定的 N 和 K 句话，输出假话的总数。</p>
<p><strong>思路</strong></p>
<p>数组ra存储子节点与根节点之间的关系：0表示同类，1表示狩猎，2表示被猎</p>
<p>因为d只能是1或2分表表示同类和狩猎所以要d-1</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mxn=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> fa[mxn],ra[mxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==fa[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> t=fa[x];</span><br><span class="line">        fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">        ra[x]=(ra[x]+ra[t])%<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,k,d,x,y,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        cin&gt;&gt;d&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;n||y&gt;n||d==<span class="number">2</span>&amp;&amp;x==y)ans++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> u=<span class="built_in">find</span>(x),v=<span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span>(u==v)&#123;</span><br><span class="line">                <span class="keyword">if</span>((ra[x]-ra[y]+<span class="number">3</span>)%<span class="number">3</span>!=d<span class="number">-1</span>)ans++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fa[u]=v;</span><br><span class="line">                ra[u]=(ra[y]+d<span class="number">-1</span>-ra[x])%<span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="虫子的生活"><a href="#虫子的生活" class="headerlink" title="虫子的生活"></a><a href="http://poj.org/problem?id=2492">虫子的生活</a></h2><p><strong>题目</strong></p>
<p>霍珀教授正在研究一种稀有虫子的性行为。他假设它们具有两种不同的性别，并且它们只与异性的虫子互动。在他的实验中，单个虫子及其相互作用很容易识别，因为它们的背上印有数字。</p>
<p>给定一个错误交互列表，确定实验是否支持他假设的两种性别没有同性恋错误，或者它是否包含一些伪造它的错误交互。</p>
<p><strong>思路</strong></p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mxn=<span class="number">2005</span>;</span><br><span class="line"><span class="type">int</span> fa[mxn],ra[mxn],tot;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==fa[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> t=fa[x];</span><br><span class="line">        fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">        ra[x]=(ra[x]+ra[t])%<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t,n,m;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Scenario #&quot;</span>&lt;&lt;++tot&lt;&lt;<span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="type">int</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i,ra[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="type">int</span> u,v;</span><br><span class="line">            cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">            <span class="type">int</span> x=<span class="built_in">find</span>(u),y=<span class="built_in">find</span>(v);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">                fa[x]=y;</span><br><span class="line">                ra[x]=(<span class="number">1</span>+ra[v]-ra[u])%<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(ra[u]==ra[v])&#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)cout&lt;&lt;<span class="string">&quot;No suspicious bugs found!\n\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Suspicious bugs found!\n\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="hdu3635"><a href="#hdu3635" class="headerlink" title="hdu3635"></a><a href="https://acm.hdu.edu.cn/showproblem.php?pid=3635">hdu3635</a></h2><p><strong>题目</strong></p>
<p>Five hundred years later, the number of dragon balls will increase unexpectedly, so it’s too difficult for Monkey King(WuKong) to gather all of the dragon balls together.<br><img src="https://acm.hdu.edu.cn/data/images/C308_1004_1.jpg" alt="img"><br>His country has N cities and there are exactly N dragon balls in the world. At first, for the ith dragon ball, the sacred dragon will puts it in the ith city. Through long years, some cities’ dragon ball(s) would be transported to other cities. To save physical strength WuKong plans to take Flying Nimbus Cloud, a magical flying cloud to gather dragon balls.<br>Every time WuKong will collect the information of one dragon ball, he will ask you the information of that ball. You must tell him which city the ball is located and how many dragon balls are there in that city, you also need to tell him how many times the ball has been transported so far.</p>
<p><strong>思路</strong></p>
<p>它要输出最后这个龙珠到达的城市编号、这个城市龙珠的数量、这个龙珠走了几次</p>
<p>龙珠最后到达的城市用父节点找很容易求出来，城市龙珠的数量在每次一批龙珠从一个城市到另一个城市，数量转移也很好求出来</p>
<p>龙珠走了几次，并查集写法：每个点走的总路程&#x3D;它的父节点走的总路程+1</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> fa[N];      <span class="comment">//记录每个点的父节点</span></span><br><span class="line"><span class="type">int</span> ba[N];      <span class="comment">//记录每个城市</span></span><br><span class="line"><span class="type">int</span> ra[N];      <span class="comment">//记录每个点移动的次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==fa[x])<span class="keyword">return</span> x;</span><br><span class="line">    <span class="type">int</span> t=fa[x];</span><br><span class="line">    fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">    ra[x]+=ra[t];</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    u=<span class="built_in">find</span>(u),v=<span class="built_in">find</span>(v);</span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span>;</span><br><span class="line">    fa[u]=v;</span><br><span class="line">    ra[u]++;</span><br><span class="line">    ba[v]+=ba[u],ba[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=t;j++)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">        <span class="type">int</span> n,m;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i,ra[i]=<span class="number">0</span>,ba[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="type">char</span> c;</span><br><span class="line">            cin&gt;&gt;c;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;T&#x27;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> u,v;</span><br><span class="line">                cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">                <span class="built_in">merge</span>(u,v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> x;</span><br><span class="line">                cin&gt;&gt;x;</span><br><span class="line">                <span class="type">int</span> u=<span class="built_in">find</span>(x);</span><br><span class="line">                cout&lt;&lt;u&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ba[u]&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ra[x]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><p>可以解决大部分基于区间上的更新以及求和问题。</p>
<p>定义一个区间[ l , r ]，其中update左端点，则比 l 大的区间都加 k。求值的时候sum右端点得到的是所有在区间内的和在区间外的，sum左端点得到的是所有在区间外的，减一减即是区间内的值。</p>
<p>树状数组是往小的取值。</p>
<h2 id="一个简单的整数问题"><a href="#一个简单的整数问题" class="headerlink" title="一个简单的整数问题"></a><a href="https://www.acwing.com/problem/content/248/">一个简单的整数问题</a></h2><p><strong>题目</strong></p>
<p>给定长度为 N 的数列 A，然后输入 M 行操作指令。</p>
<p>第一类指令形如 C l r d，表示把数列中第 l∼r 个数都加 d。</p>
<p>第二类指令形如 Q x，表示询问数列中第 x 个数的值。</p>
<p>对于每个询问，输出一个整数表示答案。</p>
<p><strong>思路</strong></p>
<p>给 l 端点update(d)，r 端点update(-d)，查询[l,r]区间内的端点的时候它会加上d，查询区间后的端点的时候它不受影响。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,q,a[N],c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">		c[x]+=k;</span><br><span class="line">		x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r=a[x];</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		r+=c[x];</span><br><span class="line">		x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> u,v,x;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="type">char</span> c;</span><br><span class="line">		cin&gt;&gt;c;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">			cin&gt;&gt;u;</span><br><span class="line">			cout&lt;&lt;<span class="built_in">sum</span>(u)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			cin&gt;&gt;u&gt;&gt;v&gt;&gt;x;</span><br><span class="line">			<span class="built_in">update</span>(u,x);</span><br><span class="line">			<span class="built_in">update</span>(v+<span class="number">1</span>,-x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="一个简单的整数问题2"><a href="#一个简单的整数问题2" class="headerlink" title="一个简单的整数问题2"></a><a href="https://www.acwing.com/problem/content/244/">一个简单的整数问题2</a></h2><p><strong>题目</strong></p>
<p>给定一个长度为 N 的数列 A，以及 M 条指令，每条指令可能是以下两种之一：</p>
<ol>
<li>C l r d，表示把 A[l],A[l+1],…,A[r] 都加上 d。</li>
<li>Q l r，表示询问数列中第 l∼r 个数的和。</li>
</ol>
<p>对于每个询问，输出一个整数表示答案。</p>
<p><strong>思路</strong></p>
<p>数组b存储 i * d[i]，j，数组c存储 d[i]</p>
<p>设a[i]表示第i个数的值，d[i]为差分数组d等于a[i]-a[i-1]<br> a[1]&#x3D;d[1]<br> a[2]&#x3D;d[1]+d[2]<br> ······<br> a[x]&#x3D;d[1]+d[2]+…+a[x]<br> 则a[1]+a[2]+…+a[x]&#x3D;x$<em>$d[1]+(x-1)$</em>$d[2]+…+d[x]<br>           &#x3D;(x+1)$<em>$(d[1]+d[2]+…+d[x])-(1</em>d[1]+2<em>d[2]+…+x</em>d[x])<br>           &#x3D;(x+1)Σd[i]-Σi*d[i]  (i从1到x)</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b[N],c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> p=k*x;</span><br><span class="line">	<span class="keyword">while</span>(x&lt;N)&#123;</span><br><span class="line">		c[x]+=k;</span><br><span class="line">		b[x]+=p;</span><br><span class="line">		x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r=<span class="number">0</span>,p=x+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		r+=p*c[x]-b[x];</span><br><span class="line">		x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> n,m;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="type">int</span> now,pre=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;now;</span><br><span class="line">		<span class="built_in">update</span>(i,now-pre);</span><br><span class="line">		pre=now;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="type">char</span> c;</span><br><span class="line">		<span class="type">int</span> u,v,x;</span><br><span class="line">		cin&gt;&gt;c;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">			cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">			cout&lt;&lt;<span class="built_in">sum</span>(v)-<span class="built_in">sum</span>(u<span class="number">-1</span>)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			cin&gt;&gt;u&gt;&gt;v&gt;&gt;x;</span><br><span class="line">			<span class="built_in">update</span>(u,x);</span><br><span class="line">			<span class="built_in">update</span>(v+<span class="number">1</span>,-x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="楼兰图腾"><a href="#楼兰图腾" class="headerlink" title="楼兰图腾"></a><a href="https://www.acwing.com/problem/content/submission/243/">楼兰图腾</a></h2><p><strong>题目</strong></p>
<p>西部 314 在楼兰古城的下面发现了一幅巨大的壁画，壁画上被标记出了 n 个点，经测量发现这 n 个点的水平位置和竖直位置是两两不同的。</p>
<p>西部 314 认为这幅壁画所包含的信息与这 n 个点的相对位置有关，因此不妨设坐标分别为 (1,y1),(2,y2),…,(n,yn)，其中 y1∼yn 是 1 到 n 的一个排列。</p>
<p>西部 314 打算研究这幅壁画中包含着多少个图腾。</p>
<p>如果三个点 (i,yi),(j,yj),(k,yk) 满足 1≤i&lt;j&lt;k≤n1 且 yi&gt;yj,yj&lt;yk，则称这三个点构成 V 图腾;</p>
<p>如果三个点 (i,yi),(j,yj),(k,yk) 满足 1≤i&lt;j&lt;k≤n1 且 yi&lt;yj,yj&gt;yk，则称这三个点构成 ∧ 图腾;</p>
<p>西部 314 想知道，这 n 个点中两个部落图腾的数目。</p>
<p>因此，你需要编写一个程序来求出 V 的个数和 ∧ 的个数。</p>
<p><strong>思路</strong></p>
<p>先求每个点前后比它小的数量和比它大的数量，前面比它小的数量 * 后面比它小的数量就是 ^ 的个数，反之前面比它大的数量 * 后面比它大的数量就是 V 的个数，这样即可求得答案。</p>
<p>用树状数组的方法，求前面比它小的，先将前面的数存进去；求后面比它小的，先将后面的数存进去。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> l_up[N],l_down[N];</span><br><span class="line"><span class="type">int</span> r_up[N],r_down[N];</span><br><span class="line"><span class="type">int</span> a[N],c[N],n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">		c[x]++;</span><br><span class="line">		x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		r+=c[x];</span><br><span class="line">		x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">		l_down[i]=<span class="built_in">sum</span>(a[i]);		<span class="comment">//前面比它小的数</span></span><br><span class="line">		l_up[i]=i<span class="number">-1</span>-l_down[i];</span><br><span class="line">		<span class="built_in">update</span>(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">		r_down[i]=<span class="built_in">sum</span>(a[i]);</span><br><span class="line">		r_up[i]=n-i-r_down[i];</span><br><span class="line">		<span class="built_in">update</span>(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		ans1+=l_down[i]*r_down[i];</span><br><span class="line">		ans2+=l_up[i]*r_up[i];</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans2&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ans1;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="谜一样的牛-二分"><a href="#谜一样的牛-二分" class="headerlink" title="谜一样的牛(二分)"></a><a href="https://www.acwing.com/problem/content/245/">谜一样的牛(二分)</a></h2><p><strong>题目</strong></p>
<p>有 n 头奶牛，已知它们的身高为 1∼n 且各不相同，但不知道每头奶牛的具体身高。</p>
<p>现在这 n 头奶牛站成一列，已知第 i 头牛前面有 Ai 头牛比它低，求每头奶牛的身高。</p>
<p><strong>思路</strong></p>
<p>树状数组 + 二分</p>
<p>因为身高为 1~n 所以一开始每个点都 +1，从后往前，通过二分得出这个点的身高是多少，然后这个点已经被选了，所以这个身高 -1。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],c[N],res[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">		c[x]+=k;</span><br><span class="line">		x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		r+=c[x];</span><br><span class="line">		x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">		<span class="built_in">update</span>(i,<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">		<span class="type">int</span> l=<span class="number">1</span>,r=n,ans;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">			<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">sum</span>(mid)&gt;=a[i])ans=mid,r=mid<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		res[i]=ans;</span><br><span class="line">		<span class="built_in">update</span>(ans,<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;res[i]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="苹果树"><a href="#苹果树" class="headerlink" title="苹果树"></a><a href="http://poj.org/problem?id=3321">苹果树</a></h2><p><strong>题目</strong></p>
<p>卡卡家门外有一棵苹果树。每年秋天，树上都会长出很多苹果。卡卡非常喜欢苹果，所以他一直在精心培育大苹果树。</p>
<p>这棵树有<em>N</em>个分叉，由树枝连接。卡卡将叉子编号为 1 到 <em>N</em>，根始终编号为 1。苹果会在叉子上生长，两个苹果不会在同一个叉子上生长。卡卡想知道一个子树中有多少个苹果，用于研究苹果树的生产能力。</p>
<p>麻烦的是，一个新的苹果可能会在空叉子上生长一段时间，卡卡可能会从树上摘下一个苹果作为他的甜点。你能帮助卡卡吗？</p>
<p><strong>思路</strong></p>
<p>从根节点dfs，给节点的起点和终点建立下标（起点一定比终点的下标小，父节点的起点一定小于子节点，父节点的终点一定大于子节点），更新每次从起点开始遍历，输出结果从终点 - 起点前，这个节点的终点一定在所有父节点的前面，起点一定在所有父节点的后面，所以终点sum的值包含父节点和子节点，而起点sum的值只包含父节点，所以见一下就是子节点的值。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> to[N&lt;&lt;<span class="number">1</span>],from[N&lt;&lt;<span class="number">1</span>],head[N],idx;</span><br><span class="line"><span class="type">int</span> vis[N],tot,d[N][<span class="number">2</span>],b[N],c[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	to[idx]=v,from[idx]=head[u],head[u]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	d[u][<span class="number">0</span>]=++tot;		<span class="comment">//根节点开始的tot的值一定比子树的小</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i!=<span class="number">-1</span>;i=from[i])&#123;</span><br><span class="line">		<span class="type">int</span> j=to[i];</span><br><span class="line">		<span class="keyword">if</span>(vis[j])<span class="keyword">continue</span>;</span><br><span class="line">		vis[j]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(j);</span><br><span class="line">	&#125;</span><br><span class="line">	d[u][<span class="number">1</span>]=tot;		<span class="comment">//根节点结束的tot的值一定比子树的大</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	c[x]*=<span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> k=c[x];</span><br><span class="line">	x=d[x][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">		b[x]+=k;</span><br><span class="line">		x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		r+=b[x];</span><br><span class="line">		x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="type">int</span> u,v;</span><br><span class="line">		cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">		<span class="built_in">add</span>(u,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		c[i]=<span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">update</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	cin&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="type">char</span> c;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin&gt;&gt;c&gt;&gt;x;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">&#x27;Q&#x27;</span>)cout&lt;&lt;<span class="built_in">sum</span>(d[x][<span class="number">1</span>])-<span class="built_in">sum</span>(d[x][<span class="number">0</span>]<span class="number">-1</span>)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;		<span class="comment">//要输出的是子树，所以根节点的范围最大</span></span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">update</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="奇怪的线段"><a href="#奇怪的线段" class="headerlink" title="奇怪的线段"></a><a href="https://www.lanqiao.cn/problems/5131/learning/?contest_id=144">奇怪的线段</a></h2><p><strong>题目</strong></p>
<p>在一维数轴上，小蓝画了n个闭区间线段，小桥会多次询问你，每次给定两个点a，b，问有多少个区间包含a点，但是不包含b点。</p>
<p><strong>思路</strong></p>
<p>容斥原理，包含a的区间 - 包含[a,b]的区间。右端点后的排前面，这样每次查询区间[a,b]的时候，满足左端在它前面的它右端一定在它后面，所以只要满足左端在它前面的区间的数量&#x3D;&#x3D;包含该区间的所有闭区间数量，包含a点的区间又一开始就给好了，所以易得结果。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> d[N],res[N],c[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">	<span class="type">int</span> id,op;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp;b)<span class="type">const</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(r!=b.r)<span class="keyword">return</span> r&gt;b.r;		<span class="comment">//右端大的排前面</span></span><br><span class="line">		<span class="keyword">if</span>(l!=b.l)<span class="keyword">return</span> l&lt;b.l;		<span class="comment">//右端一样大，左端小的排前面</span></span><br><span class="line">		<span class="keyword">return</span> op&lt;b.op;				<span class="comment">//左右两端都一样大，不是查询区间的排前面</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;nb[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(x&lt;N)&#123;</span><br><span class="line">		c[x]++;</span><br><span class="line">		x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		r+=c[x];</span><br><span class="line">		x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> n,q;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		d[l]++,d[r+<span class="number">1</span>]--;</span><br><span class="line">		nb[i]=&#123;l,r,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)d[i]+=d[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		res[i]=d[l];</span><br><span class="line">		<span class="keyword">if</span>(l&gt;r)<span class="built_in">swap</span>(l,r);</span><br><span class="line">		nb[++n]=&#123;l,r,i,<span class="number">1</span>&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(nb+<span class="number">1</span>,nb+<span class="number">1</span>+n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(nb[i].op==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">add</span>(nb[i].l);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			res[nb[i].id]-=<span class="built_in">sum</span>(nb[i].l);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)cout&lt;&lt;res[i]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="逆序对的数量"><a href="#逆序对的数量" class="headerlink" title="逆序对的数量"></a><a href="https://www.acwing.com/problem/content/790/">逆序对的数量</a></h2><p><strong>题目</strong></p>
<p>给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。</p>
<p>逆序对的定义如下：对于数列的第 i 个和第 j 个元素，如果满足 i&lt;j 且 a[i]&gt;a[j]，则其为一个逆序对；否则不是。</p>
<p>1≤n≤100000，<br>数列中的元素的取值范围 [1,1e9]。</p>
<p><strong>思路</strong></p>
<p>元素取值过大，但数量少，可以离散化，将元素值用下标表示。</p>
<p>因为树状数组是往小的取值，所以sum所得的是下标小的数量，所以应该将元素值大的排前面，如果值相同，下标大的排前面。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,c[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp;x)<span class="type">const</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(a==x.a)<span class="keyword">return</span> b&gt;x.b;</span><br><span class="line">		<span class="keyword">return</span> a&gt;x.a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;nb[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">		c[x]++;</span><br><span class="line">		x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		r+=c[x];</span><br><span class="line">		x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;nb[i].a;</span><br><span class="line">		nb[i].b=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(nb+<span class="number">1</span>,nb+<span class="number">1</span>+n);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		ans+=<span class="built_in">sum</span>(nb[i].b);</span><br><span class="line">		<span class="built_in">update</span>(nb[i].b);</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="矩阵-二维"><a href="#矩阵-二维" class="headerlink" title="矩阵(二维)"></a><a href="http://poj.org/problem?id=2155"><strong>矩阵</strong>(二维)</a></h2><p><strong>题目</strong></p>
<p>给定一个 N*N 矩阵 A，其元素为 0 或 1。A[i， j] 表示第 i 行和第 j 列中的数字。最初我们有 A[i， j] &#x3D; 0 （1 &lt;&#x3D; i， j &lt;&#x3D; N）。</p>
<p>我们可以通过以下方式更改矩阵。给定一个左上角为 （x1， y1） 且右下角为 （x2， y2） 的矩形，我们使用 “not” 操作更改矩形中的所有元素（如果它是 ‘0’ 则将其更改为 ‘1’，否则将其更改为 ‘0’）。为了维护矩阵的信息，要求您编写一个程序来接收和执行两种指令。</p>
<ol>
<li>C x1 y1 x2 y2 （1 &lt;&#x3D; x1 &lt;&#x3D; x2 &lt;&#x3D; n， 1 &lt;&#x3D; y1 &lt;&#x3D; y2 &lt;&#x3D; n） 通过使用左上角为 （x1， y1） 且右下角为 （x2， y2） 的矩形更改矩阵。</li>
<li>Q x y （1 &lt;&#x3D; x， y &lt;&#x3D; n） 查询 A[x， y]。</li>
</ol>
<p><strong>思路</strong></p>
<p>二维看，[ a, b ]到[ c, d ]，一维 a 到 c 跟新的话，应该update(a)再update(c+1,-1)，二维原理一样。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,c[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=y;j&lt;=n;j+=<span class="built_in">lowbit</span>(j))&#123;</span><br><span class="line">			c[i][j]+=k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=y;j;j-=<span class="built_in">lowbit</span>(j))&#123;</span><br><span class="line">			res+=c[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res%<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t,q;</span><br><span class="line">	cin&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">		cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">		<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">			<span class="type">char</span> c;</span><br><span class="line">			cin&gt;&gt;c;</span><br><span class="line">			<span class="keyword">if</span>(c==<span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">				<span class="type">int</span> xx1,yy1,xx2,yy2;</span><br><span class="line">				cin&gt;&gt;xx1&gt;&gt;yy1&gt;&gt;xx2&gt;&gt;yy2;</span><br><span class="line">				<span class="built_in">update</span>(xx1,yy1,<span class="number">1</span>);</span><br><span class="line">				<span class="built_in">update</span>(xx2+<span class="number">1</span>,yy2+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">				<span class="built_in">update</span>(xx1,yy2+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">				<span class="built_in">update</span>(xx2+<span class="number">1</span>,yy1,<span class="number">-1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="type">int</span> x,y;</span><br><span class="line">				cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">				cout&lt;&lt;<span class="built_in">sum</span>(x,y)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p>线段树存的是一个区间里的值</p>
<p><img src="https://cdn.acwing.com/media/article/image/2022/08/26/109870_82ea7ce424-tmp.jpg" alt="img"></p>
<h2 id="最大数"><a href="#最大数" class="headerlink" title="最大数"></a><a href="https://www.acwing.com/problem/content/1277/">最大数</a></h2><p><strong>题目</strong></p>
<p>给定一个正整数数列 a1,a2,…,an，每一个数都在 0∼p−1 之间。</p>
<p>可以对这列数进行两种操作：</p>
<ol>
<li>添加操作：向序列后添加一个数，序列长度变成 n+1；</li>
<li>询问操作：询问这个序列中最后 L 个数中最大的数是多少。</li>
</ol>
<p>程序运行的最开始，整数序列为空。</p>
<p>一共要对整数序列进行 m 次操作。</p>
<p>写一个程序，读入操作的序列，并输出询问操作的答案。</p>
<p><strong>思路</strong></p>
<p>先建树，因为m次操作，所以树的最大值应该不超过m。每个节点记录左子节点的区间左端和右子节点的区间右端，以及自身所带的值。</p>
<p>因为先添加如果被查询的话，后添加的一定已经被查询了，所以先添加的放前面，找最大的时候，取n-x+1即是找最后 x 个数内的最大值。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r,w;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	tr[u]=&#123;l,r,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">	<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	tr[u].w=<span class="built_in">max</span>(tr[u&lt;&lt;<span class="number">1</span>].w,tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].l==p&amp;&amp;tr[u].r==p)tr[u].w=x;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(p&lt;=mid)<span class="built_in">add</span>(u&lt;&lt;<span class="number">1</span>,p,x);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">add</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,p,x);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)<span class="keyword">return</span> tr[u].w;</span><br><span class="line">	<span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>,v=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid)v=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid)v=<span class="built_in">max</span>(v,<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));</span><br><span class="line">	<span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> m,p,x,a=<span class="number">0</span>,n=<span class="number">0</span>;</span><br><span class="line">	cin&gt;&gt;m&gt;&gt;p;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="type">char</span> c;</span><br><span class="line">		cin&gt;&gt;c&gt;&gt;x;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">			x=(x+a)%p;</span><br><span class="line">			<span class="built_in">add</span>(<span class="number">1</span>,++n,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			a=<span class="built_in">query</span>(<span class="number">1</span>,n-x+<span class="number">1</span>,n);</span><br><span class="line">			cout&lt;&lt;a&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="你能回答这些问题吗"><a href="#你能回答这些问题吗" class="headerlink" title="你能回答这些问题吗"></a><a href="https://www.acwing.com/problem/content/description/246/">你能回答这些问题吗</a></h2><p><strong>题目</strong></p>
<p>给定长度为 N 的数列 A，以及 M 条指令，每条指令可能是以下两种之一：</p>
<ol>
<li><code>1 x y</code>，查询区间 [x,y] 中的最大连续子段和。</li>
<li><code>2 x y</code>，把 A[x] 改成 y。</li>
</ol>
<p>对于每个查询指令，输出一个整数表示答案。</p>
<p><strong>思路</strong></p>
<p>记录每个节点的从右端开始的最大连续字段和，从左端开始的最大连续字段和，从而进行比较，再通过将左子树的右端开始的最大连续字段和 + 右子树的左端开始的最大连续字段和 的值以及左右子树的区间内最大连续字段和得到父节点的区间内最大连续字段和。</p>
<p><strong>答案</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r,sum;		<span class="comment">//w表示所有</span></span><br><span class="line">	<span class="type">int</span> lmax,rmax,tmax;	</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(node &amp;u,node &amp;l,node &amp;r)</span></span>&#123;</span><br><span class="line">	u.sum=l.sum+r.sum;</span><br><span class="line">	u.lmax=<span class="built_in">max</span>(l.lmax,l.sum+r.lmax);</span><br><span class="line">	u.rmax=<span class="built_in">max</span>(r.rmax,r.sum+l.rmax);</span><br><span class="line">	u.tmax=<span class="built_in">max</span>(l.rmax+r.lmax,<span class="built_in">max</span>(l.tmax,r.tmax));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	<span class="built_in">pushup</span>(tr[u],tr[u&lt;&lt;<span class="number">1</span>],tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	tr[u]=&#123;l,r,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(l==r)tr[u]=&#123;l,r,a[l],a[l],a[l],a[l]&#125;;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">		<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> p,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].l==p&amp;&amp;tr[u].r==p)tr[u]=&#123;p,p,w,w,w,w&#125;;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(mid&gt;=p)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,p,w);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,p,w);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)<span class="keyword">return</span> tr[u];</span><br><span class="line">	<span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;l)<span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(mid&gt;=r)<span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">auto</span> left=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">		<span class="keyword">auto</span> right=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">		node res;</span><br><span class="line">		<span class="built_in">pushup</span>(res,left,right);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> n,q;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="type">int</span> k,x,y;</span><br><span class="line">		cin&gt;&gt;k&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x&gt;y)<span class="built_in">swap</span>(x,y);</span><br><span class="line">			<span class="keyword">auto</span> ans=<span class="built_in">query</span>(<span class="number">1</span>,x,y);</span><br><span class="line">			cout&lt;&lt;ans.tmax&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">modify</span>(<span class="number">1</span>,x,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="敌兵布阵"><a href="#敌兵布阵" class="headerlink" title="敌兵布阵"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166">敌兵布阵</a></h2><p>第一行一个整数T，表示有T组数据。<br>每组数据第一行一个正整数N（N&lt;&#x3D;50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1&lt;&#x3D;ai&lt;&#x3D;50）。<br>接下来每行有一条命令，命令有4种形式：<br>(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30）<br>(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）;<br>(3)Query i j ,i和j为正整数,i&lt;&#x3D;j，表示询问第i到第j个营地的总人数;<br>(4)End 表示结束，这条命令在每组数据最后出现;<br>每组数据最多有40000条命令</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mxn=<span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,sum;</span><br><span class="line">&#125;t[mxn*<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> a[mxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    t[u].l=l,t[u].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> t[u].sum=a[l];    <span class="comment">//区间内只有一个数不能再分</span></span><br><span class="line">    <span class="keyword">return</span> t[u].sum=<span class="built_in">build</span>(l,l+r&gt;&gt;<span class="number">1</span>,u&lt;&lt;<span class="number">1</span>)+<span class="built_in">build</span>((l+r&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>,r,(u&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        t[u].sum+=num;    <span class="comment">//父节点的值增加</span></span><br><span class="line">        <span class="keyword">if</span>(t[u].l==t[u].r&amp;&amp;t[u].l==i)<span class="keyword">break</span>;    <span class="comment">//到达子节点则退出</span></span><br><span class="line">        <span class="keyword">if</span>((t[u].l+t[u].r&gt;&gt;<span class="number">1</span>)&gt;=i)u=u&lt;&lt;<span class="number">1</span>;    <span class="comment">//判断i节点的位置</span></span><br><span class="line">        <span class="keyword">else</span> u=(u&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        t[u].sum-=num;</span><br><span class="line">        <span class="keyword">if</span>(t[u].l==t[u].r&amp;&amp;t[u].l==i)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>((t[u].l+t[u].r&gt;&gt;<span class="number">1</span>)&gt;=i)u=u&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> u=(u&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r||t[u].l&gt;r||t[u].r&lt;l)<span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">//所选区间不存在或者在这颗树的最大区间外返回0</span></span><br><span class="line">    <span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)<span class="keyword">return</span> t[u].sum;    <span class="comment">//如果所选树区间所找范围内返回它的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(l,r,u&lt;&lt;<span class="number">1</span>)+<span class="built_in">query</span>(l,r,(u&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>);    <span class="comment">//将所找范围内的所有树区间的值相加</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,tot,u,v;</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;++tot&lt;&lt;<span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);    <span class="comment">//建树</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            cin&gt;&gt;s;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;E&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">            cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)cout&lt;&lt;<span class="built_in">query</span>(u,v,<span class="number">1</span>)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)<span class="built_in">add</span>(u,v);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;S&#x27;</span>)<span class="built_in">sub</span>(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="区间最大公约数"><a href="#区间最大公约数" class="headerlink" title="区间最大公约数"></a><a href="https://www.acwing.com/problem/content/247/">区间最大公约数</a></h2><p><strong>题目</strong></p>
<p>给定一个长度为 N 的数列 A，以及 M 条指令，每条指令可能是以下两种之一：</p>
<ol>
<li><code>C l r d</code>，表示把 A[l],A[l+1],…,A[r] 都加上 d。</li>
<li><code>Q l r</code>，表示询问 A[l],A[l+1],…,A[r] 的最大公约数(GCD)。</li>
</ol>
<p>对于每个询问，输出一个整数表示答案。</p>
<p><strong>思路</strong></p>
<p>单点加值好加，所以用前缀和存储</p>
<p>gcd(a−nb,b)&#x3D;gcd(a,b)</p>
<p>(a,b,c)&#x3D;((a,b),(b,c))&#x3D;((a,b−a),(b,c−b))&#x3D;(a,b−a,b,c−b)</p>
<p>由于(b−a,b)&#x3D;(a,b−a),所以(a,b,c)&#x3D;(a,b−a,c−b)</p>
<p>所以要求区间[L,R]的最大公约数只要求出a[L]和(a[L+1]-a[L],a[L+2]-a[L+1],…,a[R]-a[R-1])</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line">ll s[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	ll l,r,w,d;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b?<span class="built_in">gcd</span>(b,a%b):a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(node &amp;u,node &amp;l,node &amp;r)</span></span>&#123;</span><br><span class="line">	u.w=l.w+r.w;</span><br><span class="line">	u.d=<span class="built_in">gcd</span>(l.d,r.d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(ll u)</span></span>&#123;</span><br><span class="line">	<span class="built_in">pushup</span>(tr[u],tr[u&lt;&lt;<span class="number">1</span>],tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll u,ll l,ll r)</span></span>&#123;</span><br><span class="line">	tr[u]=&#123;l,r,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		ll m=s[l]-s[l<span class="number">-1</span>];</span><br><span class="line">		tr[u]=&#123;l,r,m,m&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		ll mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">		<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(ll u,ll p,ll w)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].l==tr[u].r&amp;&amp;tr[u].l==p)&#123;</span><br><span class="line">		ll m=tr[u].w+w;</span><br><span class="line">		tr[u]=&#123;p,p,m,m&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		ll mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(p&lt;=mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,p,w);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,p,w);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(ll u,ll l,ll r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)<span class="keyword">return</span> tr[u];</span><br><span class="line">	ll mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;l)<span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(mid&gt;=r)<span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">auto</span> left=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">		<span class="keyword">auto</span> right=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">		node res;</span><br><span class="line">		<span class="built_in">pushup</span>(res,left,right);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll n,q;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;s[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="type">char</span> c;</span><br><span class="line">		ll x,y,d;</span><br><span class="line">		cin&gt;&gt;c;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">			<span class="keyword">auto</span> left=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,x);</span><br><span class="line">			<span class="keyword">auto</span> right=<span class="built_in">query</span>(<span class="number">1</span>,x+<span class="number">1</span>,y);</span><br><span class="line">			cout&lt;&lt;<span class="built_in">abs</span>(<span class="built_in">gcd</span>(left.w,right.d))&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;y&gt;&gt;d;</span><br><span class="line">			<span class="built_in">modify</span>(<span class="number">1</span>,x,d);</span><br><span class="line">			<span class="keyword">if</span>(y+<span class="number">1</span>&lt;=n)<span class="built_in">modify</span>(<span class="number">1</span>,y+<span class="number">1</span>,-d);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="一个简单的整数问题2-1"><a href="#一个简单的整数问题2-1" class="headerlink" title="一个简单的整数问题2"></a><a href="https://www.acwing.com/problem/content/244/">一个简单的整数问题2</a></h2><p><strong>题目</strong></p>
<p>给定一个长度为 N 的数列 A，以及 M 条指令，每条指令可能是以下两种之一：</p>
<ol>
<li><code>C l r d</code>，表示把 A[l],A[l+1],…,A[r] 都加上 d。</li>
<li><code>Q l r</code>，表示询问数列中第 l∼r 个数的和。</li>
</ol>
<p>对于每个询问，输出一个整数表示答案。</p>
<p><strong>思路</strong></p>
<p>懒标记，存储区间内需要加的值，区间内加值，先加到父节点上可以减少运行时间，查询、添加的时候先向下遍历，添加结束后向上遍历将父节点的总和值增加。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r,w,add;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(node &amp;u,node &amp;l,node &amp;r)</span></span>&#123;</span><br><span class="line">	u.w=l.w+r.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	<span class="built_in">pushup</span>(tr[u],tr[u&lt;&lt;<span class="number">1</span>],tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(node &amp;u,node &amp;l,node &amp;r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u.add)&#123;</span><br><span class="line">		l.add+=u.add,l.w+=(l.r-l.l+<span class="number">1</span>)*u.add;</span><br><span class="line">		r.add+=u.add,r.w+=(r.r-r.l+<span class="number">1</span>)*u.add;</span><br><span class="line">		u.add=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	<span class="built_in">pushdown</span>(tr[u],tr[u&lt;&lt;<span class="number">1</span>],tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)tr[u]=&#123;l,r,a[l],<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		tr[u]=&#123;l,r,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">		<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)<span class="keyword">return</span> tr[u].w;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>,v=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(l&lt;=mid)v=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">		<span class="keyword">if</span>(r&gt;mid)v+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">		<span class="keyword">return</span> v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)&#123;</span><br><span class="line">		tr[u].w+=(tr[u].r-tr[u].l+<span class="number">1</span>)*d;</span><br><span class="line">		tr[u].add+=d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">pushdown</span>(u);</span><br><span class="line">		<span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(l&lt;=mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,l,r,d);</span><br><span class="line">		<span class="keyword">if</span>(r&gt;mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,d);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> n,q;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="type">char</span> c;</span><br><span class="line">		<span class="type">int</span> x,y,d;</span><br><span class="line">		cin&gt;&gt;c;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">			cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,x,y)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;y&gt;&gt;d;</span><br><span class="line">			<span class="built_in">modify</span>(<span class="number">1</span>,x,y,d);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h1><p>现在假设我们有一根线，从下往上开始扫描：</p>
<p><img src="https://oi-wiki.org/geometry/images/scanning.svg" alt="img"></p>
<ul>
<li>如图所示，我们可以把整个矩形分成如图各个颜色不同的小矩形，那么这个小矩形的高就是我们扫过的距离，那么剩下了一个变量，那就是矩形的长一直在变化。</li>
<li>我们的线段树就是为了维护矩形的长，我们给每一个矩形的上下边进行标记，下面的边标记为 1，上面的边标记为 -1，每遇到一个矩形时，我们知道了标记为 1 的边，我们就加进来这一条矩形的长，等到扫描到 -1 时，证明这一条边需要删除，就删去，利用 1 和 -1 可以轻松的到这种状态。</li>
<li>还要注意这里的线段树指的并不是线段的一个端点，而指的是一个区间，所以我们要计算的是 r+1 和 r-1。</li>
<li>需要 <a href="https://oi-wiki.org/misc/discrete/">离散化</a>。</li>
</ul>
<h2 id="亚特兰蒂斯"><a href="#亚特兰蒂斯" class="headerlink" title="亚特兰蒂斯"></a><a href="https://www.acwing.com/problem/content/249/">亚特兰蒂斯</a></h2><p><strong>题目</strong></p>
<p>有几个古希腊书籍中包含了对传说中的亚特兰蒂斯岛的描述。</p>
<p>其中一些甚至包括岛屿部分地图。</p>
<p>但不幸的是，这些地图描述了亚特兰蒂斯的不同区域。</p>
<p>您的朋友 Bill 必须知道地图的总面积。</p>
<p>你自告奋勇写了一个计算这个总面积的程序。</p>
<p><strong>思路</strong></p>
<p>用vector离散化给出的所有的y坐标，保证每个坐标都有一个编号。</p>
<p>从x坐标左端向右边遍历，每次添加一条坐标x上的边，如果该边是开始，则高应该等于该边的长度 - 与已经包含在内的边的重叠部分；如果该边是结束，则应该将包含在内的边减去这条边所给的贡献。结果就是这条边与上一条加进去的边的x轴坐标距离 * 高。</p>
<p>线段树存储的是所有加进去的y线段的长度，所以tr[1]保存的就是总长</p>
<p>因为y的范围太大，n总数才100，所以需要离散化，每个节点存储一个长度，所以建树的时候总数应该减1。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ing long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">double</span> x,y1,y2;</span><br><span class="line">	<span class="type">int</span> d;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp;b)<span class="type">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x&lt;b.x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;s[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">double</span>&gt;v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node2</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">	<span class="type">int</span> cnt;</span><br><span class="line">	<span class="type">double</span> w;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	tr[u]=&#123;l,r,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">	<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].cnt)</span><br><span class="line">		tr[u].w=v[tr[u].r+<span class="number">1</span>]-v[tr[u].l];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		tr[u].w=tr[u&lt;&lt;<span class="number">1</span>].w+tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].w;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)&#123;</span><br><span class="line">		tr[u].cnt+=d;</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(l&lt;=mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,l,r,d);</span><br><span class="line">		<span class="keyword">if</span>(r&gt;mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,d);</span><br><span class="line">		<span class="built_in">pushup</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">double</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),y)-v.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> n,t=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(cin&gt;&gt;n,n)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Test case #&quot;</span>&lt;&lt;++t&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		<span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">		v.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="type">double</span> xx1,yy1,xx2,yy2;</span><br><span class="line">			cin&gt;&gt;xx1&gt;&gt;yy1&gt;&gt;xx2&gt;&gt;yy2; </span><br><span class="line">			s[++tot]=&#123;xx1,yy1,yy2,<span class="number">1</span>&#125;;</span><br><span class="line">			s[++tot]=&#123;xx2,yy1,yy2,<span class="number">-1</span>&#125;;</span><br><span class="line">			v.<span class="built_in">push_back</span>(yy1);</span><br><span class="line">			v.<span class="built_in">push_back</span>(yy2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(s+<span class="number">1</span>,s+tot+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">		v.<span class="built_in">erase</span>(<span class="built_in">unique</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()),v.<span class="built_in">end</span>());</span><br><span class="line">		<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">0</span>,v.<span class="built_in">size</span>()<span class="number">-2</span>);</span><br><span class="line">		<span class="type">double</span> res=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;<span class="number">1</span>)res+=(s[i].x-s[i<span class="number">-1</span>].x)*tr[<span class="number">1</span>].w;</span><br><span class="line">			<span class="built_in">modify</span>(<span class="number">1</span>,<span class="built_in">find</span>(s[i].y1),<span class="built_in">find</span>(s[i].y2)<span class="number">-1</span>,s[i].d);</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Total explored area: &quot;</span>&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;res&lt;&lt;<span class="string">&#x27;\n&#x27;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>数论</title>
    <url>/2024/01/31/%E6%95%B0%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h1><h2 id="夏洛克和他的女朋友"><a href="#夏洛克和他的女朋友" class="headerlink" title="夏洛克和他的女朋友"></a><a href="https://www.acwing.com/problem/content/1295/">夏洛克和他的女朋友</a></h2><p><strong>题目</strong></p>
<p>夏洛克有了一个新女友（这太不像他了！）。</p>
<p>情人节到了，他想送给女友一些珠宝当做礼物。</p>
<p>他买了 n 件珠宝，第 i 件的价值是 i+1，也就是说，珠宝的价值分别为 2,3,…,n+1。</p>
<p>华生挑战夏洛克，让他给这些珠宝染色，使得一件珠宝的价格是另一件珠宝的价格的质因子时，两件珠宝的颜色不同。</p>
<p>并且，华生要求他使用的颜色数尽可能少。</p>
<p>请帮助夏洛克完成这个简单的任务。</p>
<p><strong>思路</strong></p>
<p>就是求2到n+1中的质数，欧拉筛</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="type">int</span> vis[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            pre[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pre[j]*i&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            vis[pre[j]*i]=pre[j]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pre[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">init</span>(n);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">4</span>)cout&lt;&lt;<span class="string">&quot;1\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;2\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==<span class="number">1</span>)cout&lt;&lt;<span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;2&quot;</span>;</span><br><span class="line">        cout&lt;&lt;(<span class="string">&quot;%c&quot;</span>,i==n+<span class="number">1</span>?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="𝑛-的素因数分解"><a href="#𝑛-的素因数分解" class="headerlink" title="𝑛!的素因数分解"></a><a href="https://www.acwing.com/problem/content/199/">𝑛!的素因数分解</a></h2><p><strong>题目</strong></p>
<p>给定整数 N，试把阶乘 N! 分解质因数，按照算术基本定理的形式输出分解结果中的 pi 和 ci 即可。</p>
<p><strong>思路</strong></p>
<p>求2到n中所有质数，再n除质数的阶乘，知道质数的阶乘大于n，求出来的值即使该质数在n!中的数量</p>
<p><img src="/2024/01/31/%E6%95%B0%E8%AE%BA/Users\19522\AppData\Roaming\Typora\typora-user-images\image-20231106183546942.png" alt="image-20231106183546942"></p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=<span class="literal">true</span>;</span><br><span class="line">            pre[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pre[j]*i&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            vis[pre[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pre[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">init</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=pre[i],ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=n/x;</span><br><span class="line">            x*=pre[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;pre[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="新的阶乘"><a href="#新的阶乘" class="headerlink" title="新的阶乘"></a><a href="https://www.matiji.net/exam/brushquestion/19/4347/179CE77A7B772D15A8C00DD8198AAC74">新的阶乘</a></h2><p><strong>题目</strong></p>
<p>小度是一个非常聪明的小朋友，他对于数学有着特别的热爱。有一天，他在课堂上学习了阶乘的概念后，产生了一个奇妙的想法——如果有一个数字<em>x</em>，那么<em>x</em>的阶乘写作x! &#x3D; x∗(<em>x</em>−1)∗(<em>x</em>−2)∗…∗2∗1。</p>
<p>这个简单的定义，在小度看来拥有无穷的魅力。他开始尝试用阶乘来定义新的运算，他相信这可以将复杂的数学问题简化。</p>
<p>一天，小度坐在公园里学习时，灵机一动写下了这样一个运算式f(x)&#x3D;$x^1∗(x−1)^2∗(x−2)^3…2^{x-1}−1^x$，由于小度比较喜欢质数，他听说大数的质因子分解很难，现在小度想知道这个运算式取<em>n</em>时的质因子分解形式。</p>
<p><strong>思路</strong></p>
<p>举例，$16^3$&#x3D;$(2<em>8)^3$&#x3D;$2^3</em>(2<em>4)^3$&#x3D;$2^6</em>(2*2)^3$&#x3D;$2^{12}$</p>
<p>每个数的幂分配给它的最大质因子和被质因子除后的数</p>
<p><strong>代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="type">int</span> vis[N];</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=i;</span><br><span class="line">            pre[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pre[j]*i&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            vis[pre[j]*i]=pre[j];</span><br><span class="line">            <span class="keyword">if</span>(i%pre[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">init</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i]=n+<span class="number">1</span>-i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==i)<span class="keyword">continue</span>;</span><br><span class="line">        b[i/vis[i]]+=b[i];</span><br><span class="line">        b[vis[i]]+=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;f(&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;)=&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>)cout&lt;&lt;<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        cout&lt;&lt;pre[i];</span><br><span class="line">        <span class="keyword">if</span>(b[pre[i]]!=<span class="number">1</span>)cout&lt;&lt;<span class="string">&#x27;^&#x27;</span>&lt;&lt;b[pre[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="质数距离"><a href="#质数距离" class="headerlink" title="质数距离"></a><a href="https://www.acwing.com/problem/content/198/">质数距离</a></h2><p><strong>题目</strong></p>
<p>给定两个整数 L 和 U，你需要在闭区间 [L,U] 内找到距离最接近的两个相邻质数 C1 和 C2（即 C2−C1 是最小的），如果存在相同距离的其他相邻质数对，则输出第一对。</p>
<p>同时，你还需要找到距离最远的两个相邻质数 D1 和 D2（即 D1−D2 是最大的），如果存在相同距离的其他相邻质数对，则输出第一对。</p>
<p><strong>思路</strong></p>
<p>任何一个合数N，一定有一个质因子&lt;&#x3D;$\sqrt n$</p>
<p>证明：N&#x3D;a<em>b，a&lt;&#x3D;b，$a^2$&lt;&#x3D;a</em>b&#x3D;N，a&lt;&#x3D;$\sqrt n$</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e4</span>+<span class="number">5</span>,M=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="type">bool</span> vis[M];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> b[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=<span class="literal">true</span>;</span><br><span class="line">            pre[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pre[j]*i&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            vis[pre[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pre[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">5e4</span>);</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;l&gt;&gt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> p=pre[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="built_in">max</span>((l+p<span class="number">-1</span>)/p*p<span class="comment">/*上取整*/</span>,<span class="number">2</span>*p);j&lt;=r;j+=p)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[j-l]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=r-l;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i])</span><br><span class="line">                b[++cnt]=i+l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt&lt;<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;There are no adjacent primes.\n&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mi=<span class="number">2</span>,mx=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> len=b[i]-b[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(len&lt;b[mi]-b[mi<span class="number">-1</span>]) mi=i;</span><br><span class="line">            <span class="keyword">if</span>(len&gt;b[mx]-b[mx<span class="number">-1</span>]) mx=i;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;b[mi<span class="number">-1</span>]&lt;&lt;<span class="string">&#x27;,&#x27;</span>&lt;&lt;b[mi]&lt;&lt;<span class="string">&quot; are closest, &quot;</span>;</span><br><span class="line">        cout&lt;&lt;b[mx<span class="number">-1</span>]&lt;&lt;<span class="string">&#x27;,&#x27;</span>&lt;&lt;b[mx]&lt;&lt;<span class="string">&quot; are most distant.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a><a href="https://www.acwing.com/problem/content/875/">欧拉函数</a></h1><p>1∼N 中与 N 互质的数的个数被称为欧拉函数（互质就是指两个数的最大公因数是1）</p>
<p><strong>题目</strong></p>
<p>给定 n 个正整数 ai，请你求出每个数的欧拉函数。</p>
<p><strong>思路</strong></p>
<img src="/2024/01/31/%E6%95%B0%E8%AE%BA/Users\19522\AppData\Roaming\Typora\typora-user-images\image-20231106195959688.png" alt="image-20231106195959688" style="zoom:80%;">

<p>容斥原理：N$<em>$(1-P(A)-P(B)-P(C)+P(AB)+P(AC)+P(BC)-P(ABC))&#x3D;&#x3D;N$</em>$((1-P(A))$<em>$(1-P(B))$</em>$(1-P(C))</p>
<p>总共N个数-N的其中一个质因子所在1-N范围内的所有倍数的数量-…+其中被减了2次的数的个数+…-其中被多加了2次的个数…循环</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="type">int</span> res=x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=x/i;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x%i)<span class="keyword">continue</span>;</span><br><span class="line">            res=res*(i<span class="number">-1</span>)/i;</span><br><span class="line">            <span class="keyword">while</span>(x%i==<span class="number">0</span>)x/=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">1</span>)res=res*(x<span class="number">-1</span>)/x;</span><br><span class="line">        cout&lt;&lt;res&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="筛法求欧拉函数"><a href="#筛法求欧拉函数" class="headerlink" title="筛法求欧拉函数"></a><a href="https://www.acwing.com/problem/content/876/">筛法求欧拉函数</a></h2><p><strong>题目</strong></p>
<p>给定一个正整数 n，求 1∼n 中每个数的欧拉函数之和。</p>
<p><strong>思路</strong></p>
<p>欧拉函数的公式是n乘上所有1-它的质因子的倒数，所以如果一个数a是另一个数b的k倍数，即a&#x3D;kb，则Φ(a)&#x3D;k$*$Φ(b)，如果这个k也是一个质数：</p>
<ul>
<li>如果这个k是b的质因子，那么(1-1&#x2F;k)应该在Φ(b)当中，所以不用再乘</li>
<li>如果这个k不是b的质因子，说明a比b多一个质因子，那么Φ(a)&#x3D;a$<em>$Φ(b)&#x2F;b$</em>$(1-1&#x2F;k)，因为a&#x2F;b&#x3D;k，所以Φ(a)&#x3D;Φ(b)$*$(k-1)</li>
</ul>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> vis[N];</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            pre[++tot]=i;</span><br><span class="line">            vis[i]=i<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pre[j]*i&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pre[j]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[i*pre[j]]=pre[j]*vis[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[i*pre[j]]=(pre[j]<span class="number">-1</span>)*vis[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">init</span>(n);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ans+=vis[i];</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="可见的点"><a href="#可见的点" class="headerlink" title="可见的点"></a><a href="https://www.acwing.com/problem/content/203/">可见的点</a></h2><p><strong>题目</strong></p>
<p>在一个平面直角坐标系的第一象限内，如果一个点 (x,y) 与原点 (0,0) 的连线中没有通过其他任何点，则称该点在原点处是可见的。</p>
<p>例如，点 (4,2) 就是不可见的，因为它与原点的连线会通过点 (2,1)。</p>
<p>部分可见点与原点的连线如下图所示：</p>
<p><img src="https://www.acwing.com/media/article/image/2019/01/18/19_a68c1a281a-3090_1.png" alt="3090_1.png"></p>
<p>编写一个程序，计算给定整数 N 的情况下，满足 0≤x，y≤N 的可见点 (x，y) 的数量（可见点不包括原点）。</p>
<p><strong>思路</strong></p>
<p>考虑到x与y如果不是互质的话，x和y都除以它两的最大公约数，则得到的两个数的斜率和它们一样，而得到的数已经存过了，所以只有x与y互质，存的点才是可见的</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="type">int</span> vis[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=i<span class="number">-1</span>;</span><br><span class="line">            pre[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pre[j]*i&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pre[j]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[i*pre[j]]=vis[i]*pre[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[i*pre[j]]=vis[i]*(pre[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">init</span>(N<span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            res+=vis[j]*<span class="number">2</span>;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;n&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;res&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a><a href="https://www.acwing.com/problem/content/222/">最大公约数</a></h2><p><strong>题目</strong></p>
<p>给定整数 N，求 1≤x,y≤N 且 GCD(x,y) 为素数的数对 (x,y) 有多少对。</p>
<p>GCD(x,y) 即求 x，y 的最大公约数。</p>
<p><strong>思路</strong></p>
<p>求gcd(x,y)&#x3D;&#x3D;∑p –&gt; ∑gcd(x&#x2F;p,y&#x2F;p)&#x3D;&#x3D;1</p>
<p>所以只要求出1-N&#x2F;∑p中互质的数量</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="type">int</span> vis[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=i<span class="number">-1</span>;</span><br><span class="line">            pre[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pre[j]*i&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pre[j]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[i*pre[j]]=vis[i]*pre[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[i*pre[j]]=vis[i]*(pre[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        vis[i]+=vis[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">init</span>(n);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        ans+=vis[n/pre[i]]*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h1><h2 id="约数个数"><a href="#约数个数" class="headerlink" title="约数个数"></a><a href="https://www.acwing.com/problem/content/872/">约数个数</a></h2><p><strong>题目</strong></p>
<p>给定 n 个正整数 ai，请你输出这些数的乘积的约数个数，答案对 1e9+7 取模。</p>
<p><strong>思路</strong></p>
<img src="/2024/01/31/%E6%95%B0%E8%AE%BA/Users\19522\AppData\Roaming\Typora\typora-user-images\image-20231101172706526.png" alt="image-20231101172706526" style="zoom: 80%;">

<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;pre;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=x/i;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(x%i==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pre[i]++;</span><br><span class="line">                x/=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">1</span>)pre[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:pre)ans=ans*(it.second+<span class="number">1</span>)%mod;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="公倍数"><a href="#公倍数" class="headerlink" title="公倍数"></a>公倍数</h1><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title=" 最小公倍数"></a><a href="http://oj.ecustacm.cn/problem.php?id=1820"> 最小公倍数</a></h2><p><strong>题目</strong></p>
<p>给定一个数字n，请问是否存在一个区间<a href="l%E2%89%A0r">l,r</a>，使得n等于整个区间所有数字的最小公倍数。</p>
<p><strong>思路</strong></p>
<p>初始化将所有区间的最小公倍数都求出来存在map中，因为区间只有两个的话可以直接拿所给数字来逆着判断是否存在，所以区间可以最短为3，因此循环可以降到1e6，因为三个连续数字的最小公倍数它可能会是三个数乘积&#x2F;2（当第一个数字为偶数的时候），所以循环遍历要到2e6，更长的连续数字它能遍历到的终点一定是比三个小的，所以循环最大长度就为2e6</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">1e18</span>;</span><br><span class="line">map&lt;<span class="type">int</span>,pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a/__gcd(a,b)*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=<span class="number">2000000</span>;l++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum=l*(l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=l+<span class="number">2</span>;;r++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum=<span class="built_in">lcm</span>(sum,r);</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;inf||sum&lt;=<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(sum))<span class="keyword">continue</span>;</span><br><span class="line">            mp[sum]=&#123;l,r&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">sqrt</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(x*(x+<span class="number">1</span>)==n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(n))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[n].first&lt;x)cout&lt;&lt;mp[n].first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;mp[n].second&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;x+<span class="number">1</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;x+<span class="number">1</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mp.<span class="built_in">count</span>(n))</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;mp[n].first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;mp[n].second&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><h2 id="越狱"><a href="#越狱" class="headerlink" title="越狱"></a><a href="https://www.acwing.com/problem/content/1292/">越狱</a></h2><p><strong>题目</strong></p>
<p>监狱有连续编号为 1 到 n 的 n 个房间，每个房间关押一个犯人。</p>
<p>有 m 种宗教，每个犯人可能信仰其中一种。</p>
<p>不存在没有信仰的犯人。</p>
<p>如果相邻房间的犯人信仰的宗教相同，就可能发生越狱。</p>
<p>求有多少种状态可能发生越狱。</p>
<p><strong>思路</strong></p>
<p>总的可能排序有$m^n$种，不会越狱的可能为m*$(m-1)^{n-1}$，用快速幂</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">100003</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)r=r*x%mod;</span><br><span class="line">        x=x*x%mod;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;(<span class="built_in">qmi</span>(m,n)-m*<span class="built_in">qmi</span>(m<span class="number">-1</span>,n<span class="number">-1</span>)%mod+mod)%mod&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="快速幂求逆元"><a href="#快速幂求逆元" class="headerlink" title="快速幂求逆元"></a><a href="https://www.acwing.com/problem/content/878/">快速幂求逆元</a></h2><p><strong>题目</strong></p>
<p>给定 n 组 ai,pi，其中 pi 是质数，求 ai 模 pi 的乘法逆元，若逆元不存在则输出 <code>impossible</code>。</p>
<p>注意：请返回在 0∼p−1 之间的逆元。</p>
<p>乘法逆元的定义</p>
<blockquote>
<p>若整数 b，m 互质，并且对于任意的整数 a，如果满足 b|a，则存在一个整数 x，使得 a&#x2F;b≡a*x(mod m)，则称 x 为 b 的模 m 乘法逆元，记为 b−1(mod m)。</p>
<p>b 存在乘法逆元的充要条件是 b 与模数 m 互质。当模数 m 为质数时，$b^{m−2}$ 即为 b 的乘法逆元。</p>
</blockquote>
<p><strong>思路</strong></p>
<p>满足两个条件</p>
<ul>
<li>m是质数</li>
<li>b与m互质</li>
</ul>
<p>则$b^{-1}$≡$b^{m-2}$(mod m)</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> p,<span class="type">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p&amp;<span class="number">1</span>)r=r*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,p;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;p;</span><br><span class="line">        <span class="keyword">if</span>(__gcd(a,p)==<span class="number">1</span>)</span><br><span class="line">            cout&lt;&lt;<span class="built_in">qmi</span>(a,p<span class="number">-2</span>,p)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;impossible\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h1><h2 id="斐波那契前-n-项和"><a href="#斐波那契前-n-项和" class="headerlink" title="斐波那契前 n 项和"></a><a href="https://www.acwing.com/problem/content/1305/">斐波那契前 n 项和</a></h2><p><strong>题目</strong></p>
<p>大家都知道 Fibonacci 数列吧，f1&#x3D;1,f2&#x3D;1,f3&#x3D;2,f4&#x3D;3,…,fn&#x3D;fn−1+fn−2。</p>
<p>现在问题很简单，输入 n 和 m，求 fn 的前 n 项和 Sn mod m。</p>
<p><strong>思路</strong></p>
<p>矩阵$<em>$矩阵，重载运算符$</em>$，因为幂大用快速幂</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n,mod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mp[<span class="number">3</span>][<span class="number">3</span>]=&#123;</span><br><span class="line">        <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    node <span class="keyword">operator</span>*(<span class="type">const</span> node&amp;b)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        node ans;</span><br><span class="line">        <span class="built_in">memset</span>(ans.mp,<span class="number">0</span>,<span class="keyword">sizeof</span> ans.mp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.mp[i][j]+=mp[i][k]*b.mp[k][j];</span><br><span class="line">                    ans.mp[i][j]%=mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">qmul</span><span class="params">(node a,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node ans;</span><br><span class="line">    <span class="built_in">memset</span>(ans.mp,<span class="number">0</span>,<span class="keyword">sizeof</span> ans.mp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)ans.mp[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)ans=ans*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;mod;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">3</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>%mod&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node a;</span><br><span class="line">    node ans=<span class="built_in">qmul</span>(a,n<span class="number">-2</span>);</span><br><span class="line">    cout&lt;&lt;(ans.mp[<span class="number">0</span>][<span class="number">0</span>]*<span class="number">2</span>+ans.mp[<span class="number">0</span>][<span class="number">1</span>]+ans.mp[<span class="number">0</span>][<span class="number">2</span>])%mod&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a><a href="https://www.acwing.com/problem/content/879/">扩展欧几里得算法</a></h1><p><strong>题目</strong></p>
<p>给定 n 对正整数 $a_i$,$b_i$，对于每对数，求出一组 $x_i$,$y_i$，使其满足 $a_i$×$x_i$+$b_i$×$y_i$&#x3D;gcd($a_i$,$b_i$)。</p>
<p><strong>思路</strong></p>
<p><img src="/2024/01/31/%E6%95%B0%E8%AE%BA/Users\19522\AppData\Roaming\Typora\typora-user-images\image-20231108183845794.png" alt="image-20231108183845794"></p>
<p>因为</p>
<ul>
<li>gcd(a,b)&#x3D;gcd(b,a%b)</li>
</ul>
<p>而</p>
<ul>
<li>bx′+(a%b)y′&#x3D;gcd(b,a%b)</li>
<li>bx′+(a−⌊a&#x2F;b⌋∗b)y′&#x3D;gcd(b,a%b)</li>
<li>ay′+b(x′−⌊a&#x2F;b⌋∗y′)&#x3D;gcd(b,a%b)&#x3D;gcd(a,b)</li>
</ul>
<p>故而</p>
<ul>
<li>x&#x3D;y′,y&#x3D;x′−⌊a&#x2F;b⌋∗y′</li>
</ul>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> dx,dy;</span><br><span class="line">    <span class="built_in">exgcd</span>(b,a%b,dx,dy);</span><br><span class="line">    x=dy,y=dx-a/b*dy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,x,y;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">exgcd</span>(a,b,x,y);</span><br><span class="line">        cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;y&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="翻倍"><a href="#翻倍" class="headerlink" title="翻倍"></a><a href="https://www.acwing.com/problem/content/5289/">翻倍</a></h2><p><strong>题目</strong></p>
<p>给定两个正整数，初始时两数均为 11。</p>
<p>你可以进行任意次（也可以不进行）翻倍操作，每次操作任选一个非负整数 k，令两数中的一个数乘以 k，另一个数乘以 $k^2$。</p>
<p>请你计算，是否能够通过一系列操作，使得最终第一个数变为 a，第二个数变为 b。</p>
<p><strong>思路</strong></p>
<p><img src="/2024/01/31/%E6%95%B0%E8%AE%BA/Users\19522\AppData\Roaming\Typora\typora-user-images\image-20231108211056470.png" alt="image-20231108211056470"></p>
<p>其中a1、a2、…、ak每个都应该是3的倍数</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> c=<span class="built_in">cbrt</span>(a*b);</span><br><span class="line">        <span class="keyword">if</span>(c*c*c==a*b &amp;&amp; a%c==<span class="number">0</span> &amp;&amp; b%c==<span class="number">0</span>)cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>目录</title>
    <url>/2024/01/31/%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p><a href="https://wenzhouce.github.io/2024/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构 | 活在梦里 (wenzhouce.github.io)</a></p>
<p><a href="https://wenzhouce.github.io/2024/01/31/%E6%95%B0%E8%AE%BA/">数论 | 活在梦里 (wenzhouce.github.io)</a></p>
]]></content>
  </entry>
  <entry>
    <title>筛法求欧拉函数</title>
    <url>/2024/01/31/%E7%AD%9B%E6%B3%95%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://www.acwing.com/problem/content/876/">874. 筛法求欧拉函数 - AcWing题库</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个正整数 n，求 1∼n 中每个数的欧拉函数之和。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><img src="/2024/01/31/%E7%AD%9B%E6%B3%95%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/欧拉函数.webp" alt="欧拉函数">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> phi[N];</span><br><span class="line"><span class="type">int</span> pre[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_eulers</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!phi[i])&#123;</span><br><span class="line">            phi[i]=i<span class="number">-1</span>;</span><br><span class="line">            pre[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre[j]*i&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pre[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                phi[i*pre[j]]=phi[i]*pre[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> phi[i*pre[j]]=phi[i]*(pre[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">get_eulers</span>(n);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans+=phi[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数论</tag>
        <tag>欧拉函数</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>题单</title>
    <url>/2024/02/01/%E9%A2%98%E5%8D%95/</url>
    <content><![CDATA[<h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><h3 id="概率DP"><a href="#概率DP" class="headerlink" title="概率DP"></a>概率DP</h3><p><a href="https://ac.nowcoder.com/acm/problem/267147">小红叒战小紫 (nowcoder.com)</a></p>
<h3 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h3><p><a href="https://ac.nowcoder.com/acm/problem/266903">You Brought Me A Gentle Breeze on the Field (nowcoder.com)</a></p>
]]></content>
  </entry>
</search>
